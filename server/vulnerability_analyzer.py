from flask import Blueprint, request, send_file, jsonify
import xml.etree.ElementTree as ET
import datetime
import os

vulnerability_analyzer_routes = Blueprint("vulnerability_analyzer", __name__)

# Create necessary directories if they don't exist
vulnerability_analyzer_directory = os.path.join(
    os.path.dirname(__file__), "Vulnerability-analyzer"
)
uploads_directory = os.path.join(vulnerability_analyzer_directory, "uploads")
output_directory = os.path.join(vulnerability_analyzer_directory, "output")

os.makedirs(vulnerability_analyzer_directory, exist_ok=True)
os.makedirs(uploads_directory, exist_ok=True)
os.makedirs(output_directory, exist_ok=True)


@vulnerability_analyzer_routes.route("/make-vulnerability-analysis", methods=["POST"])
def make_vulnerability_analysis():
    # Check if a file is uploaded
    if "file" not in request.files:
        return "No file uploaded", 400

    file = request.files["file"]
    if file.filename == "":
        return "No file selected", 400
    # Check the file extension to handle both XML and PDF
    file_extension = os.path.splitext(file.filename)[1].lower()
    if file_extension not in [".xml"]:
        return "Invalid file format. Only XML files are allowed.", 400

    # Save the uploaded file
    current_datetime = datetime.datetime.now().strftime("%d%m%y_%H%M%S")
    filename = f"Vulnerabilities_{current_datetime}"
    file_path = os.path.join(uploads_directory, filename + file_extension)
    file.save(file_path)

    tree = ET.parse(file_path)
    root = tree.getroot()

    # Extract the desired information from the XML
    start_time = root.find(".//metadata/timestamp").text
    end_time = root.find(".//metadata/timestamp").text
    hosts = root.find(".//metadata/options/targets").text

    result = {"start_time": start_time, "end_time": end_time, "hosts": hosts}
    return jsonify(result)
