import React, { useCallback, useState } from "react";
import axios from "axios";
import { Box, Button, IconButton, Typography } from "@mui/material";
import { styled } from "@mui/material/styles";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import SendIcon from "@mui/icons-material/Send";
import DeleteIcon from "@mui/icons-material/Delete";
import HourglassBottomIcon from "@mui/icons-material/HourglassBottom";
import VulnerabilityTable from "./VulnerabilityTable";
import VulnerabilityDiagram from "./VulnerabilityDiagram";

import style from "./VulnerabilityAnalyzer.module.css";
import config from "../../../config";

const VisuallyHiddenInput = styled("input")({
  clip: "rect(0 0 0 0)",
  clipPath: "inset(50%)",
  height: 1,
  overflow: "hidden",
  position: "absolute",
  bottom: 0,
  left: 0,
  whiteSpace: "nowrap",
  width: 1,
});
const VulnerabilityAnalyzer = React.memo(
  ({ currentLanguage, onRemove, isRemovable }) => {
    const [file, setFile] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [scanInfo, setScanInfo] = useState(null);

    const handleFileChange = useCallback(({ target }) => {
      setFile(target.files[0]);
    }, []);

    const handleSubmit = useCallback(
      async (event) => {
        event.preventDefault();
        setIsLoading(true);

        const formData = new FormData();
        formData.append("file", file);
        try {
          const response = await axios.post(
            `${config.apiURL}/make-vulnerability-analysis`,
            formData,
            {
              headers: {
                "Content-Type": "multipart/form-data",
              },
            }
          );

          // setFile(!file);
          setScanInfo(response.data);
        } catch (error) {
          console.error(error);
        }

        setIsLoading(false);
      },
      [file]
    );
    return (
      <Box
        className={style.vulnerability_analyzer}
        sx={{ textAlign: "center" }}
      >
        <Box
          sx={{
            display: "flex",
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          {isRemovable && (
            <IconButton onClick={onRemove} disabled={isLoading} color="error">
              <DeleteIcon />
            </IconButton>
          )}
        </Box>
        <form onSubmit={handleSubmit}>
          {file ? (
            <Typography variant="body1" sx={{ mt: 2 }}>
              {currentLanguage === "ENG"
                ? `Uploaded File: ${file.name}`
                : `Загруженный файл: ${file.name}`}
            </Typography>
          ) : (
            <Typography variant="body1" sx={{ mt: 2 }}>
              {currentLanguage === "ENG"
                ? "No file uploaded"
                : "Файл не загружен"}
            </Typography>
          )}
          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              mt: 2,
            }}
          >
            <Box
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
              }}
            >
              <Button
                component="label"
                variant="contained"
                startIcon={<CloudUploadIcon />}
                disabled={isLoading}
              >
                {currentLanguage === "ENG" ? "Upload" : "Загрузить"}
                <VisuallyHiddenInput
                  type="file"
                  accept=".xml"
                  onChange={handleFileChange}
                />
              </Button>
              <Button
                type="submit"
                disabled={!file || isLoading}
                variant="contained"
                endIcon={isLoading ? <HourglassBottomIcon /> : <SendIcon />}
                sx={{ ml: 2 }}
              >
                {isLoading
                  ? currentLanguage === "ENG"
                    ? "Processing..."
                    : "Обработка..."
                  : currentLanguage === "ENG"
                  ? "Process"
                  : "Обработать"}
              </Button>
            </Box>
          </Box>
        </form>
        {scanInfo ? (
          <Box sx={{ textAlign: "center", maxWidth: "1200px", mx: "auto" }}>
            <Typography variant="body1" sx={{ mt: 2 }}>
              Этот тип аудита производит автоматизированное сканирование портов
              сетевых хостов с целью выявления уязвимых служб. Сведения об
              уязвимостях, полученные при проведении аудита, носят вероятностный
              характер и требуют дополнительного подтверждения/опроверждения на
              этапе устранения уязвимостей.
            </Typography>
            <Typography variant="body1" sx={{ mt: 2 }}>
              {currentLanguage === "ENG"
                ? `Creation time: ${scanInfo.creation_time}`
                : `Формирование отчета: ${scanInfo.creation_time} `}
            </Typography>
            <Typography variant="body1" sx={{ mt: 2 }}>
              {currentLanguage === "ENG"
                ? `Start/End Scan: ${scanInfo.start_time} / ${scanInfo.end_time}`
                : `Начало/завершение сканирования: ${scanInfo.start_time} / ${scanInfo.end_time}`}
            </Typography>
            <Typography variant="body1" sx={{ mt: 2 }}>
              {currentLanguage === "ENG"
                ? `Hosts: ${scanInfo.target_hosts}`
                : `Хосты: ${scanInfo.target_hosts}`}
            </Typography>
            <Typography
              variant="body1"
              sx={{ mt: 2, mb: 1, fontWeight: "bold" }}
            >
              {" "}
              Таблица распределения уязвимостей по хостам
            </Typography>
            <VulnerabilityTable
              currentLanguage={currentLanguage}
              vulnerabilityData={scanInfo.vulnerabilities}
            />
            <VulnerabilityDiagram
              vulnerabilityData={scanInfo.vulnerabilities}
              currentLanguage={currentLanguage}
              percent={scanInfo.percent}
            />
          </Box>
        ) : (
          <Typography variant="body1" sx={{ mt: 2 }}>
            {currentLanguage === "ENG"
              ? "No scan information available"
              : "Информация о сканировании недоступна"}
          </Typography>
        )}
      </Box>
    );
  }
);
export default VulnerabilityAnalyzer;
