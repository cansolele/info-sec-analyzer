import React, { useState, useEffect } from "react";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import { orderBy } from "lodash";

const VulnerabilityTable = ({ vulnerabilityData }) => {
  const [sortedData, setSortedData] = useState([]);
  const [sortKey, setSortKey] = useState("Total");
  const [sortOrder, setSortOrder] = useState("desc");

  useEffect(() => {
    const sorted = orderBy(
      Object.keys(vulnerabilityData).map((host) => ({
        Host: host,
        ...vulnerabilityData[host],
        Total:
          vulnerabilityData[host].Critical +
          vulnerabilityData[host].High +
          vulnerabilityData[host].Medium +
          vulnerabilityData[host].Low +
          vulnerabilityData[host].Unavailable,
      })),
      sortKey,
      sortOrder
    );
    setSortedData(sorted);
  }, [vulnerabilityData, sortKey, sortOrder]);

  const handleSort = (key) => {
    if (key === sortKey) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      setSortKey(key);
      setSortOrder("desc");
    }
  };
  ``;

  const headerStyles = {
    fontWeight: "bold",
    cursor: "pointer",
    textAlign: "center",
    padding: 0,
    color: "white",
  };
  return (
    <TableContainer component={Paper}>
      <Table aria-label="vulnerability table">
        <TableHead>
          <TableRow>
            <TableCell
              sx={{
                ...headerStyles,
                cursor: "default",
                textAlign: "left",
                paddingLeft: 1.5,
                backgroundColor: "#d9d9d9",
                color: "black",
              }}
            >
              Хост
            </TableCell>
            <TableCell
              sx={{ ...headerStyles, backgroundColor: "#87171a" }}
              onClick={() => handleSort("Critical")}
            >
              Критический
              {sortKey === "Critical" &&
                " " + (sortOrder === "asc" ? "▲" : "▼")}
            </TableCell>
            <TableCell
              sx={{ ...headerStyles, backgroundColor: "#cc0000" }}
              onClick={() => handleSort("High")}
            >
              Высокий
              {sortKey === "High" && " " + (sortOrder === "asc" ? "▲" : "▼")}
            </TableCell>
            <TableCell
              sx={{ ...headerStyles, backgroundColor: "#f5770f" }}
              onClick={() => handleSort("Medium")}
            >
              Средний
              {sortKey === "Medium" && " " + (sortOrder === "asc" ? "▲" : "▼")}
            </TableCell>
            <TableCell
              sx={{ ...headerStyles, backgroundColor: "#00705c" }}
              onClick={() => handleSort("Low")}
            >
              Низкий
              {sortKey === "Low" && " " + (sortOrder === "asc" ? "▲" : "▼")}
            </TableCell>
            <TableCell
              sx={{ ...headerStyles, backgroundColor: "#696969" }}
              onClick={() => handleSort("Unavailable")}
            >
              Недоступно
              {sortKey === "Unavailable" &&
                " " + (sortOrder === "asc" ? "▲" : "▼")}
            </TableCell>
            <TableCell
              sx={{
                ...headerStyles,
                backgroundColor: "#d9d9d9",
                color: "black",
              }}
              onClick={() => handleSort("Total")}
            >
              Всего
              {sortKey === "Total" && " " + (sortOrder === "asc" ? "▲" : "▼")}
            </TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {sortedData.map((row) => (
            <TableRow key={row.Host}>
              <TableCell>{row.Host}</TableCell>
              <TableCell align="center">{row.Critical}</TableCell>
              <TableCell align="center">{row.High}</TableCell>
              <TableCell align="center">{row.Medium}</TableCell>
              <TableCell align="center">{row.Low}</TableCell>
              <TableCell align="center">{row.Unavailable}</TableCell>
              <TableCell align="center">{row.Total}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default VulnerabilityTable;
