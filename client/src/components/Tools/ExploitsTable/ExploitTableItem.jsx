import React, { useEffect, useCallback, useState } from "react";
import axios from "axios";
import {
  Box,
  Button,
  FormControl,
  FormControlLabel,
  FormLabel,
  InputLabel,
  MenuItem,
  Radio,
  LinearProgress,
  RadioGroup,
  Select,
  IconButton,
  Typography,
  Paper,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import SendIcon from "@mui/icons-material/Send";
import DeleteIcon from "@mui/icons-material/Delete";
import HourglassBottomIcon from "@mui/icons-material/HourglassBottom";
import DownloadIcon from "@mui/icons-material/Download";
import style from "./ExploitTableItem.module.css";
import config from "../../../config";

const VisuallyHiddenInput = styled("input")({
  clip: "rect(0 0 0 0)",
  clipPath: "inset(50%)",
  height: 1,
  overflow: "hidden",
  position: "absolute",
  bottom: 0,
  left: 0,
  whiteSpace: "nowrap",
  width: 1,
});

const ExploitTableItem = React.memo(
  ({ currentLanguage, onRemove, isRemovable, socket, itemKey }) => {
    const [file, setFile] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [downloadLink, setDownloadLink] = useState(null);
    const [tableLanguage, setTableLanguage] = useState(
      currentLanguage === "ENG" ? "ENG" : "RUS"
    );
    const [progress, setProgress] = useState(null);
    const [selectedScanner, setSelectedScanner] = useState("REDCheck");
    const [sid, setSid] = useState(null);
    const [allowedFileTypes, setAllowedFileTypes] = useState([
      "application/xml",
      "text/xml",
      "application/pdf",
    ]);

    const [errorMessage, setErrorMessage] = useState("");

    const handleFileChange = useCallback(
      ({ target }) => {
        const selectedFile = target.files[0];
        if (selectedFile && !allowedFileTypes.includes(selectedFile.type)) {
          setErrorMessage(
            currentLanguage === "ENG"
              ? "Wrong file type"
              : "Неправильный тип файла"
          );
          setFile(null);
        } else {
          setFile(selectedFile);
          setErrorMessage("");
        }
      },
      [allowedFileTypes]
    );

    useEffect(() => {
      if (socket) {
        const handleConnect = () => {
          setSid(socket.id);
          setIsLoading(false);
        };
        if (socket.connected) {
          setSid(socket.id);
          setIsLoading(false);
        } else {
          setIsLoading(true);
          socket.on("connect", handleConnect);
        }

        return () => {
          socket.off("connect", handleConnect);
        };
      }
    }, [socket]);
    const handleScannerChange = (event) => {
      setSelectedScanner(event.target.value);
      setErrorMessage("");
      setFile(null);
      switch (event.target.value) {
        case "REDCheck":
        case "NmapVulners":
          setAllowedFileTypes([
            "application/xml",
            "text/xml",
            "application/pdf",
          ]);
          break;
        case "CveList":
          setAllowedFileTypes(["text/plain"]);
          break;
        case "Another":
          setAllowedFileTypes(["application/pdf"]);
          break;
        default:
          setAllowedFileTypes(["application/xml", "application/pdf"]);
      }
    };
    useEffect(() => {
      const progressListener = (data) => {
        if (data.key === itemKey) {
          setProgress((data.cve_cntr / data.cve_total) * 100);
        }
      };

      if (socket) {
        socket.on("progress", progressListener);
      }

      return () => {
        if (socket) {
          socket.off("progress", progressListener);
        }
      };
    }, [socket, itemKey]);

    const handleSubmit = useCallback(
      async (event) => {
        event.preventDefault();

        if (!sid) {
          alert(
            "Please wait for the connection to establish before submitting."
          );
          return;
        }

        setIsLoading(true);

        const formData = new FormData();
        formData.append("file", file);
        formData.append("tableLanguage", tableLanguage);
        formData.append("selectedScanner", selectedScanner);
        formData.append("sid", sid);
        formData.append("key", itemKey);

        try {
          const response = await axios.post(
            `${config.apiURL}/make-exploits-table`,
            formData,
            {
              headers: {
                "Content-Type": "multipart/form-data",
              },
            }
          );

          setDownloadLink(response.data.downloadLink);
        } catch (error) {
          console.error(error);
          setDownloadLink(null);
        }

        setProgress(null);
        setIsLoading(false);
        setErrorMessage("");
      },
      [file, tableLanguage, selectedScanner, sid, itemKey, allowedFileTypes]
    );

    return (
      <Paper
        className={style.exploits_table}
        sx={{ bgcolor: "background.paper" }}
      >
        <Box
          sx={{
            display: "flex",
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          <Typography sx={{ mb: 2, fontWeight: "bold" }} variant="h5">
            {currentLanguage === "ENG"
              ? "Create exploits table"
              : "Создать таблицу c эксплоитами"}
          </Typography>
        </Box>
        {isRemovable && (
          <IconButton
            sx={{ position: "absolute", top: 1, right: 1 }}
            onClick={onRemove}
            disabled={isLoading}
            color="error"
          >
            <DeleteIcon />
          </IconButton>
        )}
        <form onSubmit={handleSubmit}>
          <Box className={style.params_form}>
            <FormControl disabled={isLoading}>
              <FormLabel id="scanner select">
                {currentLanguage === "ENG"
                  ? "Select vulnerability scanner"
                  : "Выберите сканер уязвимостей"}
              </FormLabel>
              <RadioGroup
                value={selectedScanner}
                onChange={handleScannerChange}
              >
                <FormControlLabel
                  value="REDCheck"
                  control={<Radio />}
                  label="REDCheck"
                />
                <FormControlLabel
                  value="NmapVulners"
                  control={<Radio />}
                  label="Nmap vulners"
                />
                <FormControlLabel
                  value="CveList"
                  control={<Radio />}
                  label="Cve List"
                />
                <FormControlLabel
                  value="Another"
                  control={<Radio />}
                  label={currentLanguage === "ENG" ? "Another" : "Другой"}
                />
              </RadioGroup>
            </FormControl>
            <FormControl sx={{ m: 1, minWidth: 120 }} size="small">
              <InputLabel id="tableLanguage">
                {currentLanguage === "ENG" ? "Language table" : "Язык таблицы"}
              </InputLabel>
              <Select
                disabled={isLoading}
                value={tableLanguage}
                label="Language table"
                onChange={(e) => setTableLanguage(e.target.value)}
              >
                <MenuItem value={"ENG"}>
                  {currentLanguage === "ENG" ? "English" : "Английский"}
                </MenuItem>
                <MenuItem value={"RUS"}>
                  {currentLanguage === "ENG" ? "Russian" : "Русский"}
                </MenuItem>
              </Select>
            </FormControl>
          </Box>
          {errorMessage ? (
            <Typography color="error" variant="body1" sx={{ mt: 2 }}>
              {errorMessage}
            </Typography>
          ) : file ? (
            <Typography variant="body1" sx={{ mt: 2 }}>
              {currentLanguage === "ENG"
                ? `Uploaded File: ${file.name}`
                : `Загруженный файл: ${file.name}`}
            </Typography>
          ) : (
            <Typography variant="body1" sx={{ mt: 2 }}>
              {currentLanguage === "ENG"
                ? "No file uploaded"
                : "Файл не загружен"}
            </Typography>
          )}

          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              mt: 2,
            }}
          >
            <Box
              sx={{
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
              }}
            >
              <Button
                component="label"
                variant="contained"
                startIcon={<CloudUploadIcon />}
                disabled={isLoading}
              >
                {currentLanguage === "ENG" ? "Upload" : "Загрузить"}
                <VisuallyHiddenInput
                  type="file"
                  accept={allowedFileTypes.join(",")}
                  onChange={handleFileChange}
                />
              </Button>
              <Button
                type="submit"
                disabled={!file || isLoading || !sid}
                variant="contained"
                endIcon={isLoading ? <HourglassBottomIcon /> : <SendIcon />}
                sx={{ ml: 2 }}
              >
                {isLoading
                  ? currentLanguage === "ENG"
                    ? "Processing..."
                    : "Обработка..."
                  : currentLanguage === "ENG"
                  ? "Process"
                  : "Обработать"}
              </Button>
            </Box>

            <Button
              disabled={isLoading || !downloadLink}
              onClick={() => (window.location.href = downloadLink)}
              type="button"
              variant="contained"
              endIcon={<DownloadIcon />}
              sx={{
                backgroundColor: "greenButton.main",
                ":hover": { backgroundColor: "greenButton.hover" },
                mt: 2,
              }}
            >
              {currentLanguage === "ENG" ? "Download table" : "Скачать таблицу"}
            </Button>
          </Box>
        </form>

        <LinearProgress
          width="15%"
          variant="determinate"
          value={progress}
          sx={{ mt: 2 }}
        />
      </Paper>
    );
  }
);
export default ExploitTableItem;
